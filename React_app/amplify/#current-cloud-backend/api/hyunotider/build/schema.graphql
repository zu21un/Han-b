type User {
  id: ID!
  name: String!
  alarmTime: String!
  email: String!
  password: String!
  keywords(keywordId: ModelIDKeyConditionInput, filter: ModelUserKeywordFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelUserKeywordConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type UserKeyword {
  id: ID!
  userId: ID!
  keywordId: ID!
  user: User!
  keyword: Keyword!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Notification {
  id: ID!
  name: String!
  content: String!
  link: String!
  date: String!
  orgId: ID!
  organization: Organization!
  keywords(keywordId: ModelIDKeyConditionInput, filter: ModelNotiKeywordFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelNotiKeywordConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type NotiKeyword {
  id: ID!
  notiId: ID!
  keywordId: ID!
  noti: Notification!
  keyword: Keyword!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Keyword {
  id: ID!
  name: String!
  users(userId: ModelIDKeyConditionInput, filter: ModelUserKeywordFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelUserKeywordConnection
  notis(notiId: ModelIDKeyConditionInput, filter: ModelNotiKeywordFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelNotiKeywordConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Organization {
  id: ID!
  name: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelUserConnection {
  items: [User]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelUserFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  alarmTime: ModelStringInput
  email: ModelStringInput
  password: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getUser(id: ID!): User
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
  getUserKeyword(id: ID!): UserKeyword
  listUserKeywords(filter: ModelUserKeywordFilterInput, limit: Int, nextToken: String): ModelUserKeywordConnection
  getNotification(id: ID!): Notification
  listNotifications(filter: ModelNotificationFilterInput, limit: Int, nextToken: String): ModelNotificationConnection
  getNotiKeyword(id: ID!): NotiKeyword
  listNotiKeywords(filter: ModelNotiKeywordFilterInput, limit: Int, nextToken: String): ModelNotiKeywordConnection
  getKeyword(id: ID!): Keyword
  listKeywords(filter: ModelKeywordFilterInput, limit: Int, nextToken: String): ModelKeywordConnection
  getOrganization(id: ID!): Organization
  listOrganizations(filter: ModelOrganizationFilterInput, limit: Int, nextToken: String): ModelOrganizationConnection
  userByEmail(email: String, sortDirection: ModelSortDirection, filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
  searchNotifications(filter: SearchableNotificationFilterInput, sort: SearchableNotificationSortInput, limit: Int, nextToken: String, from: Int): SearchableNotificationConnection
  searchNotiKeywords(filter: SearchableNotiKeywordFilterInput, sort: SearchableNotiKeywordSortInput, limit: Int, nextToken: String, from: Int): SearchableNotiKeywordConnection
  searchKeywords(filter: SearchableKeywordFilterInput, sort: SearchableKeywordSortInput, limit: Int, nextToken: String, from: Int): SearchableKeywordConnection
}

input CreateUserInput {
  id: ID
  name: String!
  alarmTime: String!
  email: String!
  password: String!
}

input UpdateUserInput {
  id: ID!
  name: String
  alarmTime: String
  email: String
  password: String
}

input DeleteUserInput {
  id: ID!
}

type Mutation {
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User
  createUserKeyword(input: CreateUserKeywordInput!, condition: ModelUserKeywordConditionInput): UserKeyword
  updateUserKeyword(input: UpdateUserKeywordInput!, condition: ModelUserKeywordConditionInput): UserKeyword
  deleteUserKeyword(input: DeleteUserKeywordInput!, condition: ModelUserKeywordConditionInput): UserKeyword
  createNotification(input: CreateNotificationInput!, condition: ModelNotificationConditionInput): Notification
  updateNotification(input: UpdateNotificationInput!, condition: ModelNotificationConditionInput): Notification
  deleteNotification(input: DeleteNotificationInput!, condition: ModelNotificationConditionInput): Notification
  createNotiKeyword(input: CreateNotiKeywordInput!, condition: ModelNotiKeywordConditionInput): NotiKeyword
  updateNotiKeyword(input: UpdateNotiKeywordInput!, condition: ModelNotiKeywordConditionInput): NotiKeyword
  deleteNotiKeyword(input: DeleteNotiKeywordInput!, condition: ModelNotiKeywordConditionInput): NotiKeyword
  createKeyword(input: CreateKeywordInput!, condition: ModelKeywordConditionInput): Keyword
  updateKeyword(input: UpdateKeywordInput!, condition: ModelKeywordConditionInput): Keyword
  deleteKeyword(input: DeleteKeywordInput!, condition: ModelKeywordConditionInput): Keyword
  createOrganization(input: CreateOrganizationInput!, condition: ModelOrganizationConditionInput): Organization
  updateOrganization(input: UpdateOrganizationInput!, condition: ModelOrganizationConditionInput): Organization
  deleteOrganization(input: DeleteOrganizationInput!, condition: ModelOrganizationConditionInput): Organization
}

input ModelUserConditionInput {
  name: ModelStringInput
  alarmTime: ModelStringInput
  email: ModelStringInput
  password: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
}

type Subscription {
  onCreateUser: User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser: User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser: User @aws_subscribe(mutations: ["deleteUser"])
  onCreateUserKeyword: UserKeyword @aws_subscribe(mutations: ["createUserKeyword"])
  onUpdateUserKeyword: UserKeyword @aws_subscribe(mutations: ["updateUserKeyword"])
  onDeleteUserKeyword: UserKeyword @aws_subscribe(mutations: ["deleteUserKeyword"])
  onCreateNotification: Notification @aws_subscribe(mutations: ["createNotification"])
  onUpdateNotification: Notification @aws_subscribe(mutations: ["updateNotification"])
  onDeleteNotification: Notification @aws_subscribe(mutations: ["deleteNotification"])
  onCreateNotiKeyword: NotiKeyword @aws_subscribe(mutations: ["createNotiKeyword"])
  onUpdateNotiKeyword: NotiKeyword @aws_subscribe(mutations: ["updateNotiKeyword"])
  onDeleteNotiKeyword: NotiKeyword @aws_subscribe(mutations: ["deleteNotiKeyword"])
  onCreateKeyword: Keyword @aws_subscribe(mutations: ["createKeyword"])
  onUpdateKeyword: Keyword @aws_subscribe(mutations: ["updateKeyword"])
  onDeleteKeyword: Keyword @aws_subscribe(mutations: ["deleteKeyword"])
  onCreateOrganization: Organization @aws_subscribe(mutations: ["createOrganization"])
  onUpdateOrganization: Organization @aws_subscribe(mutations: ["updateOrganization"])
  onDeleteOrganization: Organization @aws_subscribe(mutations: ["deleteOrganization"])
}

type ModelUserKeywordConnection {
  items: [UserKeyword]
  nextToken: String
}

input ModelUserKeywordFilterInput {
  id: ModelIDInput
  userId: ModelIDInput
  keywordId: ModelIDInput
  and: [ModelUserKeywordFilterInput]
  or: [ModelUserKeywordFilterInput]
  not: ModelUserKeywordFilterInput
}

input CreateUserKeywordInput {
  id: ID
  userId: ID!
  keywordId: ID!
}

input UpdateUserKeywordInput {
  id: ID!
  userId: ID
  keywordId: ID
}

input DeleteUserKeywordInput {
  id: ID!
}

input ModelUserKeywordConditionInput {
  userId: ModelIDInput
  keywordId: ModelIDInput
  and: [ModelUserKeywordConditionInput]
  or: [ModelUserKeywordConditionInput]
  not: ModelUserKeywordConditionInput
}

type ModelNotificationConnection {
  items: [Notification]
  nextToken: String
}

input ModelNotificationFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  content: ModelStringInput
  link: ModelStringInput
  date: ModelStringInput
  orgId: ModelIDInput
  and: [ModelNotificationFilterInput]
  or: [ModelNotificationFilterInput]
  not: ModelNotificationFilterInput
}

input CreateNotificationInput {
  id: ID
  name: String!
  content: String!
  link: String!
  date: String!
  orgId: ID!
}

input UpdateNotificationInput {
  id: ID!
  name: String
  content: String
  link: String
  date: String
  orgId: ID
}

input DeleteNotificationInput {
  id: ID!
}

input ModelNotificationConditionInput {
  name: ModelStringInput
  content: ModelStringInput
  link: ModelStringInput
  date: ModelStringInput
  orgId: ModelIDInput
  and: [ModelNotificationConditionInput]
  or: [ModelNotificationConditionInput]
  not: ModelNotificationConditionInput
}

type ModelNotiKeywordConnection {
  items: [NotiKeyword]
  nextToken: String
}

input ModelNotiKeywordFilterInput {
  id: ModelIDInput
  notiId: ModelIDInput
  keywordId: ModelIDInput
  and: [ModelNotiKeywordFilterInput]
  or: [ModelNotiKeywordFilterInput]
  not: ModelNotiKeywordFilterInput
}

input CreateNotiKeywordInput {
  id: ID
  notiId: ID!
  keywordId: ID!
}

input UpdateNotiKeywordInput {
  id: ID!
  notiId: ID
  keywordId: ID
}

input DeleteNotiKeywordInput {
  id: ID!
}

input ModelNotiKeywordConditionInput {
  notiId: ModelIDInput
  keywordId: ModelIDInput
  and: [ModelNotiKeywordConditionInput]
  or: [ModelNotiKeywordConditionInput]
  not: ModelNotiKeywordConditionInput
}

type ModelKeywordConnection {
  items: [Keyword]
  nextToken: String
}

input ModelKeywordFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  and: [ModelKeywordFilterInput]
  or: [ModelKeywordFilterInput]
  not: ModelKeywordFilterInput
}

input CreateKeywordInput {
  id: ID
  name: String!
}

input UpdateKeywordInput {
  id: ID!
  name: String
}

input DeleteKeywordInput {
  id: ID!
}

input ModelKeywordConditionInput {
  name: ModelStringInput
  and: [ModelKeywordConditionInput]
  or: [ModelKeywordConditionInput]
  not: ModelKeywordConditionInput
}

type ModelOrganizationConnection {
  items: [Organization]
  nextToken: String
}

input ModelOrganizationFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  and: [ModelOrganizationFilterInput]
  or: [ModelOrganizationFilterInput]
  not: ModelOrganizationFilterInput
}

input CreateOrganizationInput {
  id: ID
  name: String!
}

input UpdateOrganizationInput {
  id: ID!
  name: String
}

input DeleteOrganizationInput {
  id: ID!
}

input ModelOrganizationConditionInput {
  name: ModelStringInput
  and: [ModelOrganizationConditionInput]
  or: [ModelOrganizationConditionInput]
  not: ModelOrganizationConditionInput
}

input ModelIDKeyConditionInput {
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  between: [ID]
  beginsWith: ID
}

input SearchableStringFilterInput {
  ne: String
  gt: String
  lt: String
  gte: String
  lte: String
  eq: String
  match: String
  matchPhrase: String
  matchPhrasePrefix: String
  multiMatch: String
  exists: Boolean
  wildcard: String
  regexp: String
  range: [String]
}

input SearchableIntFilterInput {
  ne: Int
  gt: Int
  lt: Int
  gte: Int
  lte: Int
  eq: Int
  range: [Int]
}

input SearchableFloatFilterInput {
  ne: Float
  gt: Float
  lt: Float
  gte: Float
  lte: Float
  eq: Float
  range: [Float]
}

input SearchableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input SearchableIDFilterInput {
  ne: ID
  gt: ID
  lt: ID
  gte: ID
  lte: ID
  eq: ID
  match: ID
  matchPhrase: ID
  matchPhrasePrefix: ID
  multiMatch: ID
  exists: Boolean
  wildcard: ID
  regexp: ID
  range: [ID]
}

input SearchableNotificationFilterInput {
  id: SearchableIDFilterInput
  name: SearchableStringFilterInput
  content: SearchableStringFilterInput
  link: SearchableStringFilterInput
  date: SearchableStringFilterInput
  orgId: SearchableIDFilterInput
  and: [SearchableNotificationFilterInput]
  or: [SearchableNotificationFilterInput]
  not: SearchableNotificationFilterInput
}

enum SearchableSortDirection {
  asc
  desc
}

enum SearchableNotificationSortableFields {
  id
  name
  content
  link
  date
  orgId
}

input SearchableNotificationSortInput {
  field: SearchableNotificationSortableFields
  direction: SearchableSortDirection
}

type SearchableNotificationConnection {
  items: [Notification]
  nextToken: String
  total: Int
}

input SearchableNotiKeywordFilterInput {
  id: SearchableIDFilterInput
  notiId: SearchableIDFilterInput
  keywordId: SearchableIDFilterInput
  and: [SearchableNotiKeywordFilterInput]
  or: [SearchableNotiKeywordFilterInput]
  not: SearchableNotiKeywordFilterInput
}

enum SearchableNotiKeywordSortableFields {
  id
  notiId
  keywordId
}

input SearchableNotiKeywordSortInput {
  field: SearchableNotiKeywordSortableFields
  direction: SearchableSortDirection
}

type SearchableNotiKeywordConnection {
  items: [NotiKeyword]
  nextToken: String
  total: Int
}

input SearchableKeywordFilterInput {
  id: SearchableIDFilterInput
  name: SearchableStringFilterInput
  and: [SearchableKeywordFilterInput]
  or: [SearchableKeywordFilterInput]
  not: SearchableKeywordFilterInput
}

enum SearchableKeywordSortableFields {
  id
  name
}

input SearchableKeywordSortInput {
  field: SearchableKeywordSortableFields
  direction: SearchableSortDirection
}

type SearchableKeywordConnection {
  items: [Keyword]
  nextToken: String
  total: Int
}
